#############################
Git으로 할 수 있는 것들
#############################

1.코드저장 (백업), 원격저장소에 밀어넣기
2.과거조회, 되돌리기 (내리포지토리에서)
3.협업 (원격저장소를 만들고 협업하기) 



#github  가입하기 
 
#git 설치
#hiGit repository만들기   (원격저장소 만들기)
 
  
#사용자정보 등록      
  git config --global user.name  "sample"
  git config --global user.email  "sample@gmail.com"

   git  config --list
   등록정보 확인
#

git init 
git add . 
git commit -m " hi git"
git branch -M main
git remote add origin https://github.com/victoai/hiGit.git
git push -u origin main


내리포지토리에 여러가지 버전 만들기 
(의미있는 변경사항 만들기)

1. 내 작업폴더를 로컬리포지토리로 만들기
     git init
2.  변경사항저장하기
     git add .
3.  버전만들기 커밋하기
     git commit -m  "커밋내용  메뉴만들기ver1 "
     git commit -m  "커밋 내용  메뉴만들기ver1  색깔 변경 "



github 원격저장소에 밀어넣기 ( 원격저장소로 사용하기)
--원격저장소 목록보기
git remote 

--원격저장소 추가하기
git remote add origin  https://github.com/victoai/hiGit.git
                     
         -원격저장소별칭( origin) , 다른이름을 사용해도 된다.
         -원격저장소 주소

--원격저장소 밀어넣기, 업로드 
  git push -u origin main
  
  -u의 의미 뒤의 origin과 main branch를 기본으로 하겠다
  다음부터는 뒤의 내용을 생략할 수 있다.


원격이 바뀐경우
full  & push 한다
-먼저 full하고 push한다.
내가 변한경우
push만 하면 된다


####################################################
##github 원격저장소 만들기(협업하기)
####################################################

mainbranch를 담당할 팀원이  git repository를 만든다
프로젝트구조를 만든다 (공통사항을 만든다)

1. 팀원들이  repository를 fork 한다
2. 본인  git hub에 같은 리포지토리가 만들어진것을 확인한다
3. 지금 자신의 git hub에 만들어진 리포지토리를 clone 한다 ( 자신의 작업폴더 안에서 clone한다)
4. git branch  wjy    (branch를 만든다 )
5. git switch wjy      (branch로 이동한다)
6. 작업을 수행한다
7. git add .    (변경사항을 저장한다)
8. git commit -m "변경내용"   (변경이력을 만든다.)
9. git push -u origin wjy   (주의  wjy !!  로 push해야함)

10. 자신의 git hub에 들어가면  compare &  pull request 요청한다
11. 원래repository를 만든 사람의 github 리포지토리에 들어가면  확인 후 merge 한다 (합친다)

 
######################################
내 리포지토리에서 커밋관리하기
######################################

내 리포지토리에서  되돌리기
git init
git add .
git commit  -m "첫번째 버전"

########################
# 커밋이력조회하기 :
########################

커밋한 이력들 조회하기
커밋해시를 확인할 수 있다 (커밋을 식별할 수 있는 키값)
git log 
git log --oneline


#이전커밋으로 되돌리기
git reset --hard HEAD^    : 이전 커밋으로 되돌리기
git reset --hard HEAD^^  : 두번째 커밋으로 되돌리기
git reset --hard HEAD~1  : 이전 커밋으로 되돌리기
git reset --hard HEAD~2  : 두번째 커밋으로 되돌리기


#해당 커밋으로 되돌리기
git reset --hard 커밋해시  (되돌리고 싶은 커밋해시값)  
 

########################################### 
 원격저장소 
###########################################
git remote -v      :원격저장소 조회하기
git remote add  upstream  <url>  :  원격저장소 추가하히
git remote rm  upstream  :   원격저장소 삭제하기




########################################
 로컬브랜치를 원격저장소의  main브랜치로 강제로 업데이트 하기
#######################################

git fetch  --all
git reset --hard upstream/main
git pull    upstream  main
                                        

#########################################
 git merge  종료하기
########################################     
git merge --abort                       

 

