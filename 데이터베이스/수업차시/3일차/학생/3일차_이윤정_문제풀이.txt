-- 주문테이블 정보 조회하기
select * from tbl_test_order;
-- 주문테이블, 고객테이블 관계성이 있음 (주문테이블에 고객테이블의 id를 가지고 있음)
select * from tbl_test_customer;
select * from tbl_test_order;


select *
from tbl_test_order o
join tbl_test_customer c
on o.id = c.id;


select c.name  name,  o.sale_cnt  "sale cnt"
from tbl_test_order o
join tbl_test_customer c
on o.id = c.id
order by 2 desc;

-- 고객명, 판매수량
select c.name name, sum (o.sale_cnt) || '개'
from tbl_test_order o
join tbl_test_customer c
on o.id = c.id
group by c.name ;

-- 동등조인, 등기조인 equl 조인, inner 조인(일치하는 것만 조인된다.)
select c.name, o.sale_cnt
from tbl_test_order o
inner join tbl_test_customer c    -- inner 생략 가능 (일치하지 않는 것은 조회되지 않는다.
on o.id = c.id;


-- 고객 주문수량 조회 ! (주문하지 않는 고객도 함께 조회될 수 있도록)

-- 주문하지 않은 고객도 나오게 했음 좋겠어서
-- 고객별 판매수량
select c.name, nvl(o.sale_cnt, 0) || '개'
from tbl_test_order  o
right outer join tbl_test_customer c
on o.id = c.id;
-- 일치하지 않는 조건도 다 출력하게 함

-- 여러 테이블을 조인할 때
-- 두 개 중에서 중심테이블 먼저 표시함
select * from tbl_test_customer;
select * from tbl_test_order;



select c.name, o.sale_cnt
from tbl_test_order o
right outer join tbl_test_customer c
on o.id = c.id;


-- null 값 처리
select c.name, nvl(o.sale_cnt,0)
from tbl_test_order o
right outer join tbl_test_customer c
on o.id = c.id;



-- 고객별 집계 (group by)
select c.name, sum(nvl(o.sale_cnt,0))
from tbl_test_order o
right outer join tbl_test_customer c
on o.id = c.id
group by c.name;



select c.name, nvl(sum(o.sale_cnt), 0) qty
from tbl_test_order  o
right outer join tbl_test_customer c
on o.id = c.id
group by c.name
order by 2 desc;




select * from tbl_test_customer;
select * from tbl_test_order;
select * from TBL_TEST_GOODS;


SELECT g.pname, o.SALE_CNT
FROM tbl_test_order o
JOIN tbl_test_goods g
ON o.pcode = g.pcode;



SELECT g.pname, sum( o.SALE_CNT) as "수량"
FROM tbl_test_order o
JOIN tbl_test_goods g
ON o.pcode = g.pcode
group by  g.pname
order by 2 desc;

-- select * from tbl_test_customer;


select * from tbl_test_customer;
select * from tbl_test_order;
select * from TBL_TEST_GOODS;


SELECT g.pname, sum(g.price * o.sale_cnt)
FROM tbl_test_order o
JOIN tbl_test_goods g
ON o.pcode = g.pcode
group by g.pname
order by 2 desc;



--
select c.name, g.price * o.sale_cnt 
from tbl_test_customer c
join tbl_test_order o
on c.ID = o.id
join tbl_test_goods g
on o.pcode = g.pcode;
 
--
select c.name, sum(g.price * o.sale_cnt) as AMOUNT
from tbl_test_customer c
join tbl_test_order o
on c.ID = o.id
join tbl_test_goods g
on o.pcode = g.pcode
group by c.name
order by 2 desc;

--
--
select c.name, sum(g.price * o.sale_cnt) as AMOUNT
from tbl_test_customer c
join tbl_test_order o
on c.ID = o.id
join tbl_test_goods g
on o.pcode = g.pcode
group by c.name
order by 2 desc;


-- rollup(): 각 기준별 소계를 요약해서 보여주는 경우
-- group by가 선행되어야 한다

select * from emp;
select deptno, job, sal from emp;



select decode(deptno, null, '합계', deptno) deptno, sum(sal) -- to_char로 이렇게 표현
from emp
group by rollup(deptno);
-- to_char (금액, '999,999' )


-- 부서별 급여합계
select decode(deptno, null, '합계', deptno) deptno, to_char( sum(sal), '999,999') sal_total -- to_char로 이렇게 표현
from emp
group by rollup(deptno);
-- to_char (금액, '999,999' )



select deptno, job, sal
from emp;
-- group by

select deptno, job, sum( sal)
from emp
group by rollup(deptno, job)
order by deptno, job;


-- rollup() 소계, 전체합계



select decode(deptno, null, '전체합계', deptno) deptno, decode(job, null, '소계', job), sum( sal)
from emp
group by rollup(deptno, job)
order by deptno, job;



select * from emp;


select empno, deptno, job
from emp;


select deptno, 
    count(decode(job, 'CLERK', empno)) clerk,
    count(decode(job, 'MANAGER', empno)) manager,
    count(decode(job, 'PRESIDENT', empno)) president,
    count(decode(job, 'ANALYST', empno)) analyst,
    count(decode(job, 'SALESMAN', empno)) SALESMAN
from emp
group by deptno;


-- pivot()
select * from ( select deptno, job, empno from emp)
pivot(
  count(empno) for job in ('CLERK' as "CLERK",
                           'MANAGER' as "MANAGER",
                           'PRESIDENT' as "PRESIDENT",
                           'ANALYST' as "ANALYST",
                           'SALESMAN' as "SALESMAN")
);



-- rank() 함수
select * from emp;
select empno, ename, sal from emp;

select empno, ename, sal, rank() over (order by sal desc) from emp;    -- 순위가 겹치면 다다음 순위로
select empno, ename, sal, dense_rank() over (order by sal desc) from emp;    -- asc(낮은 거부터), desc (높은 거부터)


select empno, ename, sal, deptno, rank() over( partition by deptno order by sal desc)   -- 부서별로 sal의 높은 순서대로 구함
from emp;


select * from emp;

select * from panmae;


select p_date, p_total, sum(p_total) over (order by p_total)    -- 같은 가격끼리 나열하기
from panmae;



select p_date, p_code, p_total
from panmae;



select p_date, p_code, p_total, sum(p_total) over(order by p_total)
from panmae
where p_store=1000;



select p_date, p_code, p_store ,  p_total, sum(p_total) over(partition by p_code order by p_total)
from panmae
where p_store=1000;


drop table panmae;
commit;


select * from emp;


select sal, comm  , sal+ nvl(comm, 0) from emp;


select  sal + nvl(comm,0)
from emp;


select  sum(sal+comm)
from emp;


select  job, sum(sal+nvl(comm, 0))
from emp
group by job;   -- null이 있으면 값이 null로 나옴


select  sum(sal + nvl(comm,0))
from emp;

select  max(sal+ nvl(comm, 0)) as MAX, min(sal+ nvl(comm,0)) as MIN, trunc(avg(sal+nvl(comm, 0)),1) as AVG from emp;


select * from student;



select birthday as total
from student;


select count(birthday) as total 
from student;

select count(birthday) as total, 
decode(substr(birthday, 4, 2),
'10', 'OCT', '01', 'JAN', '02', 'FEB', '03', 'MAR', '04', 'ARL', '05', 'MAY', '06', 'JUN', '07','JUL', '08', 'AUG', '09', 'SEP', '10', 'OCT', '11', 'NOV', '12', 'DEC')
from student;


select

decode(substr(birthday, 4, 2),
'10', 'OCT', '01', 'JAN', '02', 'FEB', '03', 'MAR', '04', 'ARL', '05', 'MAY', '06', 'JUN', '07','JUL', '08', 'AUG', '09', 'SEP', '10', 'OCT', '11', 'NOV', '12', 'DEC')
from student;


select
count(birthday)|| 'EA' as total,
count(decode(substr(birthday, 4, 2), '01', 'JAN')) || 'EA' as JAN,
count(decode(substr(birthday, 4, 2), '02', 'FEB')) || 'EA' as FEB,
count(decode(substr(birthday, 4, 2), '03', 'MAR')) || 'EA' as MAR,
count(decode(substr(birthday, 4, 2), '04', 'APL')) || 'EA' as APL,
count(decode(substr(birthday, 4, 2), '05', 'MAY')) || 'EA' as MAY,
count(decode(substr(birthday, 4, 2), '06', 'JUN')) || 'EA' as JUN,
count(decode(substr(birthday, 4, 2), '07', 'JUL')) || 'EA' as JUL,
count(decode(substr(birthday, 4, 2), '08', 'JUL')) || 'EA' as AUG,
count(decode(substr(birthday, 4, 2), '09', 'SEP')) || 'EA' as SEP,
count(decode(substr(birthday, 4, 2), '10', 'OCT')) || 'EA' as OCT,
count(decode(substr(birthday, 4, 2), '11', 'JUL')) || 'EA' as NOV,
count(decode(substr(birthday, 4, 2), '12', 'DEC')) || 'EA' as DEC
from student;


select * from student;
select birthday from student;

select to_char(birthday, 'mm') from student;
select substr(birthday, 4, 2) from student;


select count(birthday),
count(decode (to_char(birthday, 'mm'), '01', 1)) || 'EA' JAN
from student;


select * from student;




SELECT 
count(tel) as total,
decode(substr(tel, 1, 3), '02)', 'SEOUL')
from student;



select 
count(tel) as total,
count(decode(substr(tel, 1, 3), '02)', 'SEOUL')) as SEOUL,
count(decode(substr(tel, 1, 3), '031', 'GYEONGGI')) as GYEONGGI,
count(decode(substr(tel, 1, 3), '051', 'BUSAN')) as GYEONGGI, 
count(decode(substr(tel, 1, 3), '052', 'ULSAN')) as ULSAN, 
count(decode(substr(tel, 1, 3), '053', 'DAEGU')) as DAEGU, 
count(decode(substr(tel, 1, 3), '055', 'GYEONGNAM')) as GYEONGNAM
 from student;
 
 

select empno, ename, job, sal from emp;


select decode(deptno, null, '전체합계', deptno) deptno, decode(job, null, '소계', job), sum( sal)
from emp
group by rollup(deptno, job)
order by deptno, job;


select * from emp;

select  deptno, count(deptno)
from emp
group by deptno;


select deptno, job, sal
from emp;


select deptno, job, sal,
decode(substr(job, 1), 'cle', 'clerk') as clerk
from emp;



select * from emp;


select deptno, job, sal from emp;


select deptno, 
       nvl(sum(decode(job, 'CLERK', sal)),0) CLERK,
       nvl(sum(decode(job, 'MANAGER', sal)),0) MANAGER,
       nvl(sum(decode(job, 'PRESIDENT', sal)),0) PRESIDENT,
       nvl(sum(decode(job, 'ANALYST', sal)),0) ANALYST,
       nvl(sum(decode(job, 'SALESMAN', sal)),0) SALESMAN
from emp
group by deptno;

select 
       nvl(sum(decode(job, 'CLERK', sal)),0) CLERK,
       nvl(sum(decode(job, 'MANAGER', sal)),0) MANAGER,
       nvl(sum(decode(job, 'PRESIDENT', sal)),0) PRESIDENT,
       nvl(sum(decode(job, 'ANALYST', sal)),0) ANALYST,
       nvl(sum(decode(job, 'SALESMAN', sal)),0) SALESMAN
from emp;


 
 
select  deptno,
        decode(job, 'CLERK', sal) as CLERK ,
        decode(job, 'MANAGER', sal) as MANAGER,
        decode(job, 'PRESIDENT', sal) as PRESIDENT,
        decode(job, 'ANALYST', sal) as ANALYST
from emp;
 
 
select  deptno,
        decode(job, 'CLERK', sal) as CLERK ,
        decode(job, 'MANAGER', sal) as MANAGER,
        decode(job, 'PRESIDENT', sal) as PRESIDENT,
        decode(job, 'ANALYST', sal) as ANALYST
from emp;


select  deptno, 
          nvl(sum(decode( job , 'CLERK', sal)),0) CLERK ,
          nvl(sum(decode( job , 'MANAGER' ,sal)) ,0) MNANAGER,
          nvl(sum(decode( job, 'PRESIDENT', sal)) ,0) PRESIDENT
from emp
group by deptno;



select * from tbl_score_200;
select * from tbl_mentor_200;




select * from tbl_join_200;

select join_id as 참가자ID, 
join_nm as 참가자이름,
birth as 생년월일,
gender as 성별,
specialty as 실력무대, 
charm as 매력무대
from tbl_join_200;


--- 1
select join_id as 참가자ID, 
join_nm as 참가자이름,
to_char(to_date(birth), 'yyyy"년"mm"월"dd"일"') as 생년월일,
decode(substr(gender, 1, 1), 'M', '남자') as 성별,
decode(substr(specialty ,1,1), 'D', '댄스', 'R', '랩', 'V', '보컬') as 실력무대,
charm as 매력무대
from tbl_join_200;



select * from tbl_score_200;
select * from tbl_mentor_200;
select * from tbl_join_200;


-- 2
select *
from tbl_mentor_200 m
JOIN tbl_score_200 s
ON m.MENTOR_ID = s.MENTORID
JOIN tbl_join_200 j
ON s.ARTISTID = j.JOIN_ID;



select score_no as 계좌번호, 
artistid as "참가자ID", 
join_nm as "참가자이름",
to_char(to_date(birth), 'yyyy"년"mm"월"dd"일"') as 생년월일,
score as "점수",
case
when score >= 90 THEN 'A'
when score >= 80 then 'B'
when score >= 70 then 'C'
else 'D' end as "등급",
mentor_nm as "멘토이름"
from tbl_mentor_200 m
JOIN tbl_score_200 s
ON m.MENTOR_ID = s.MENTORID
JOIN tbl_join_200 j
ON s.ARTISTID = j.JOIN_ID;





-- 3

select * from tbl_score_200;
select * from tbl_mentor_200;
select * from tbl_join_200;


select
join_id as "참가자ID",
join_nm as "참가자이름",
score as "점수"
from tbl_join_200 j
JOIN tbl_score_200 s
ON j.JOIN_ID = s.ARTISTID;


select
join_id as "참가자ID",
join_nm as "참가자이름",
sum(s.SCORE) as "종합점수"
from tbl_join_200 j
JOIN tbl_score_200 s
ON j.JOIN_ID = s.ARTISTID
group by join_id, join_nm;




select
join_id as "참가자ID",
join_nm as "참가자이름",
sum(s.SCORE) as "종합점수",
round(avg(s.score),2) as "평균점수"
from tbl_join_200 j
JOIN tbl_score_200 s
ON j.JOIN_ID = s.ARTISTID
group by join_id, join_nm;



select
join_id as "참가자ID",
join_nm as "참가자이름",
sum(s.SCORE) as "종합점수",
round(avg(s.score),2) as "평균점수",
rank() over (order by avg(s.SCORE) desc) as "순위"
from tbl_join_200 j
JOIN tbl_score_200 s
ON j.JOIN_ID = s.ARTISTID
group by join_id, join_nm;



select score_no as 계좌번호, 
artistid as "참가자ID", 
join_nm as "참가자이름",
to_char(to_date(birth), 'yyyy"년"mm"월"dd"일"') as 생년월일,
score as "점수",
decode(substr(score, score>=90, 'A')) as 등급,
mentor_nm as "멘토이름"
from tbl_mentor_200 m
JOIN tbl_score_200 s
ON m.MENTOR_ID = s.MENTORID
JOIN tbl_join_200 j
ON s.ARTISTID = j.JOIN_ID;



select score_no as 계좌번호, 
artistid as "참가자ID", 
join_nm as "참가자이름",
to_char(to_date(birth), 'yyyy"년"mm"월"dd"일"') as 생년월일,
score as "점수",
mentor_nm as "멘토이름"
from tbl_mentor_200 m
JOIN tbl_score_200 s
ON m.MENTOR_ID = s.MENTORID
JOIN tbl_join_200 j
ON s.ARTISTID = j.JOIN_ID;


-- 2
select *
from tbl_mentor_200 m
JOIN tbl_score_200 s
ON m.MENTOR_ID = s.MENTORID;


select join_id as 참가자ID, 
join_nm as 참가자이름,
birth as 생년월일,
decode(substr(gender, 1, 1), 'M', '남자') as 성별,
decode(substr(specialty ,1,1), 'D', '댄스', 'R', '랩', 'V', '보컬') as 실력무대,
charm as 매력무대
from tbl_join_200;





select join_id as 참가자ID, 
join_nm as 참가자이름,
birth as 생년월일,
gender as 성별,
specialty as 실력무대, 
charm as 매력무대,
from tbl_join_200;



select * from tbl_course_300;
select * from tbl_lecturer_300;

-- 수강신청 프로그램
select *
from tbl_course_300 c
JOIN tbl_lecturer_300 l
ON c.TEACHER_ID = l.T_ID;



-- 수강신청 프로그램
select
s_id as "과목코드",
s_name as "과목명",
s_grade as "학점",
t_name as "정국교수",
weekday as "요일",
start_h as "시작시간",
end_h as "종료시간"
from tbl_course_300 c
JOIN tbl_lecturer_300 l
ON c.TEACHER_ID = l.T_ID;





-- 수강신청 프로그램
select
s_id as "과목코드",
s_name as "과목명",
s_grade as "학점",
t_name as "정국교수",
decode(c.weekday, 'M ', '월', 'TU', '화', 'W ', '수', 'TH', '목', 'F ', '금') as 요일,
start_h as "시작시간",
end_h as "종료시간"
from tbl_course_300 c
JOIN tbl_lecturer_300 l
ON c.TEACHER_ID = l.T_ID;



select
s_id as "과목코드",
s_name as "과목명",
s_grade as "학점",
t_name as "정국교수",
decode(c.weekday, 'M ', '월', 'TU', '화', 'W ', '수', 'TH', '목', 'F ', '금') as 요일,
TO_CHAR(to_date(lpad('900',4,0), 'HH24MI'),'HH24:MI') as 시작시간, 
TO_CHAR(to_date(lpad('1100',4,0), 'HH24MI'),'HH24:MI') as 종료시간,
'수정/삭제' "관리"
from tbl_course_300 c
JOIN tbl_lecturer_300 l
ON c.TEACHER_ID = l.T_ID;