캡슐화  (encapsulation)
      : 데이터와 데이터를 다루는 매서드(기능)가 하나로 묶여있음 ,
        생성된 객체를 통해서 매서드를 호출할 때 객체의 정보가 전달된다=> this자기참조형변수  
        생성자, 접근제어자를 통해서 단단한 캡슐을 보장함
        데이터보호를 얻음 ( 특정변수(객체)의 값을 정해진 방법으로만 다룰 수 있게 하겠다) 


상속  :  (inheritance)
           부모로 부터 모든것을 상속받을 수 있다.
           코드의 집중화, 재사용성으로 유지보수를 좋게 할 수 있다.
           상속을 통해 하위클래스(자식클래스들을)부모형으로 다룰 수 있다.       (상속관계에서 업캐스팅, 다운캐스팅이 발생할 수 있다.    - 다운캐스팅시 문제가 발생되지 않도록 주의한다)       
           다른의미로는 여러 하위클래스를  하나의 type으로 다룰 필요가 있을 때 부모를 만들 수 도 있다.

           (상속 : abstract, interface = > 부모로써만 존재하는 ,  즉 하위클래스를 다룰 목적으로 존재하는 상속이다)
             =>추상매서드를 가진 부모로써 new될 수 없다. !!, 자식클래스가 반드시 상속하여 사용해야 한다


다형성 (polymorphisim) 
상속관계에서 
부모형참조 변수로 하위객체를 참조하면서 발생할 수 있다.(업캐스팅)
하나의 메시지 ( 동일한 호출방법)으로 여러 하위객체를 다룰 수 있다.
하위객체는 각자의 동작방식으로 실행되게 하는 기술이다.

- 선행조건
상속관계
부모의 매서드를 자식이 재정의 override 해야 한다.

- 다형성의 예시 !!! (polymorphisim) 

동물 (짖다)  
  -강아지  (멍멍~)
  -야옹이  (야옹~)
  -늑대     (아우~)


에이콘학생 (음료마시기)
      -에이콘학생을 상속받아 음료마시기를 재정의하여 각 학생은 자신이 좋아하는 방식으로 음료를 마시게 한다







